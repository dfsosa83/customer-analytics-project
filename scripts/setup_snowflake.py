#!/usr/bin/env python3
"""
Snowflake Setup and Validation Script

This script helps users set up and validate their Snowflake configuration.
It provides an interactive setup process and comprehensive validation.

Usage:
    python scripts/setup_snowflake.py [--validate-only] [--level basic|standard|comprehensive]

Author: Customer Analytics Team
Version: 1.0.0
"""

import os
import sys
import argparse
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.utils.snowflake_config import create_sample_env_file, load_snowflake_config
from app.utils.snowflake_validator import (
    validate_snowflake_setup, 
    print_validation_report, 
    ValidationLevel
)


def print_banner():
    """Print the setup banner."""
    print("\n" + "="*70)
    print("üèîÔ∏è  SNOWFLAKE SETUP & VALIDATION TOOL")
    print("   Customer Analytics Project")
    print("="*70)


def check_env_file():
    """Check if .env file exists."""
    env_path = project_root / ".env"
    return env_path.exists()


def create_env_file_interactive():
    """Create .env file interactively."""
    print("\nüìù Creating Snowflake Configuration")
    print("-" * 40)
    
    # Check if .env already exists
    env_path = project_root / ".env"
    if env_path.exists():
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Keeping existing .env file.")
            return True
    
    print("\nPlease provide your Snowflake connection details:")
    print("(Press Enter to skip optional fields)")
    
    # Collect configuration
    config = {}
    
    # Required fields
    required_fields = [
        ("SNOWFLAKE_ACCOUNT", "Snowflake Account (e.g., abc12345.us-east-1)", None),
        ("SNOWFLAKE_USER", "Username", None),
        ("SNOWFLAKE_PASSWORD", "Password", "password"),
        ("SNOWFLAKE_WAREHOUSE", "Warehouse Name", None),
        ("SNOWFLAKE_DATABASE", "Database Name", None),
        ("SNOWFLAKE_SCHEMA", "Schema Name", None),
    ]
    
    for env_var, prompt, input_type in required_fields:
        while True:
            if input_type == "password":
                import getpass
                value = getpass.getpass(f"{prompt}: ")
            else:
                value = input(f"{prompt}: ").strip()
            
            if value:
                config[env_var] = value
                break
            else:
                print("‚ùå This field is required. Please provide a value.")
    
    # Optional fields
    optional_fields = [
        ("SNOWFLAKE_ROLE", "Role (optional)", None),
    ]
    
    for env_var, prompt, input_type in optional_fields:
        value = input(f"{prompt}: ").strip()
        if value:
            config[env_var] = value
    
    # Performance settings
    print("\n‚öôÔ∏è  Performance Settings (press Enter for defaults):")
    performance_settings = [
        ("QUERY_TIMEOUT", "Query timeout in seconds", "300"),
        ("CONNECTION_POOL_SIZE", "Connection pool size", "10"),
        ("MAX_QUERY_ROWS", "Maximum rows per query", "10000"),
    ]
    
    for env_var, prompt, default in performance_settings:
        value = input(f"{prompt} [{default}]: ").strip()
        config[env_var] = value if value else default
    
    # Write .env file
    try:
        with open(env_path, 'w') as f:
            f.write("# Snowflake Configuration\n")
            f.write("# Generated by setup_snowflake.py\n\n")
            
            f.write("# =============================================================================\n")
            f.write("# SNOWFLAKE CONNECTION SETTINGS\n")
            f.write("# =============================================================================\n")
            
            for key, value in config.items():
                f.write(f"{key}={value}\n")
            
            f.write("\n# =============================================================================\n")
            f.write("# APPLICATION SETTINGS\n")
            f.write("# =============================================================================\n")
            f.write("APP_NAME=Customer Analytics API\n")
            f.write("APP_VERSION=0.1.0\n")
            f.write("DEBUG=true\n")
            f.write("HOST=0.0.0.0\n")
            f.write("PORT=8000\n")
            
            f.write("\n# =============================================================================\n")
            f.write("# EXPORT SETTINGS\n")
            f.write("# =============================================================================\n")
            f.write("DEFAULT_EXPORT_FORMAT=csv\n")
            f.write("MAX_EXPORT_SIZE_MB=100\n")
            f.write("EXPORT_RETENTION_DAYS=30\n")
        
        print(f"\n‚úÖ Configuration saved to {env_path}")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Failed to create .env file: {e}")
        return False


def run_validation(level: ValidationLevel):
    """Run Snowflake validation."""
    print(f"\nüîç Running Snowflake Validation ({level.value} level)")
    print("-" * 50)
    
    try:
        report = validate_snowflake_setup(level)
        print_validation_report(report)
        
        if report.overall_success:
            print("\nüéâ Snowflake setup is working correctly!")
            print("You can now use the Customer Analytics API with Snowflake.")
        else:
            print("\n‚ö†Ô∏è  Some validation checks failed.")
            print("Please review the errors above and fix your configuration.")
            
        return report.overall_success
        
    except Exception as e:
        print(f"\n‚ùå Validation failed with error: {e}")
        return False


def show_next_steps():
    """Show next steps after successful setup."""
    print("\nüöÄ Next Steps:")
    print("-" * 20)
    print("1. Start the API server:")
    print("   uvicorn app.main:app --reload")
    print()
    print("2. Test the Snowflake endpoints:")
    print("   curl http://localhost:8000/api/snowflake/health")
    print()
    print("3. View API documentation:")
    print("   http://localhost:8000/docs")
    print()
    print("4. Export data:")
    print("   curl -X POST http://localhost:8000/api/snowflake/export \\")
    print("     -H 'Content-Type: application/json' \\")
    print("     -d '{\"query\": \"SELECT CURRENT_TIMESTAMP()\", \"format\": \"csv\"}' \\")
    print("     --output export.csv")


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Snowflake Setup and Validation Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python scripts/setup_snowflake.py                    # Interactive setup and validation
  python scripts/setup_snowflake.py --validate-only   # Only run validation
  python scripts/setup_snowflake.py --level comprehensive  # Comprehensive validation
        """
    )
    
    parser.add_argument(
        "--validate-only",
        action="store_true",
        help="Only run validation, skip interactive setup"
    )
    
    parser.add_argument(
        "--level",
        choices=["basic", "standard", "comprehensive"],
        default="standard",
        help="Validation level (default: standard)"
    )
    
    args = parser.parse_args()
    
    # Print banner
    print_banner()
    
    # Convert level string to enum
    level_map = {
        "basic": ValidationLevel.BASIC,
        "standard": ValidationLevel.STANDARD,
        "comprehensive": ValidationLevel.COMPREHENSIVE
    }
    validation_level = level_map[args.level]
    
    # Check if we should run interactive setup
    if not args.validate_only:
        if not check_env_file():
            print("\nüìã No .env file found. Let's create one!")
            if not create_env_file_interactive():
                print("\n‚ùå Setup failed. Exiting.")
                sys.exit(1)
        else:
            print("\n‚úÖ Found existing .env file.")
            response = input("Would you like to reconfigure? (y/N): ").strip().lower()
            if response == 'y':
                if not create_env_file_interactive():
                    print("\n‚ùå Setup failed. Exiting.")
                    sys.exit(1)
    
    # Run validation
    success = run_validation(validation_level)
    
    if success:
        if not args.validate_only:
            show_next_steps()
        sys.exit(0)
    else:
        print("\nüí° Tips for troubleshooting:")
        print("- Check your Snowflake credentials")
        print("- Verify network connectivity")
        print("- Ensure your user has the required permissions")
        print("- Review the Snowflake setup guide: docs/snowflake_setup.md")
        sys.exit(1)


if __name__ == "__main__":
    main()
